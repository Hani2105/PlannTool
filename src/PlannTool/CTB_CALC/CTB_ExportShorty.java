/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PlannTool.CTB_CALC;

import static PlannTool.BACKEND.Tc_Keszletfromterv.jTable1;
import static PlannTool.BACKEND.Tc_Keszletfromterv.jTable2;
import PlannTool.ExcelExporter;
import PlannTool.infobox;
import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author gabor_hanacsek
 */
public class CTB_ExportShorty extends javax.swing.JFrame {

    /**
     * Creates new form CTB_ExportShorty
     */
//figyeljük azt a nyomi szálat
    public CTB_ExportShorty() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export Short");
        setAlwaysOnTop(true);

        jPanel1.setBackground(new java.awt.Color(236, 246, 176));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel1.setText("Export Supply:");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Operation Pull", "Push", "Bulk", "Phantom" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel2.setText("Qty less than:");

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel3.setText("Export Opeqs:");

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "0", "10", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Export");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                    .addComponent(jTextField1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(42, 42, 42))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jScrollPane1});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(86, 86, 86))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // cancel export

        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //export shortys
//bekapcsoljuk a forgófánkot
        Cursor hourglassCursor = new Cursor(Cursor.WAIT_CURSOR);
        setCursor(hourglassCursor);

//ebben tároljuk a string tömböket melyek pn enként jönnek létre
        ArrayList<String[][]> adatok = new ArrayList<>();

        //a ctb táblán fogunk végigmenni és kijelölgetjük a sorokat
        DefaultTableModel shortmodel = new DefaultTableModel();
        for (int i = 0; i < CTB.jTable1.getRowCount(); i++) {
//kijelöljük az i edik sort
            CTB.jTable1.setRowSelectionInterval(i, i);
//lefuttatjuk a shorty osztályt
            CTB_TopshortThread t = new CTB_TopshortThread();
            t.start();

// várunk amíg végez a szál
//            while (!IsReady) {
//                try {
//                    this.wait();
//                } catch (InterruptedException ex) {
//                    Logger.getLogger(CTB_ExportShorty.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
            try {
//                várunk egy kicsit
                Thread.sleep(500);

            } catch (InterruptedException ex) {
                Logger.getLogger(CTB_ExportShorty.class.getName()).log(Level.SEVERE, null, ex);
            }
//kiszedjük a modelljét
            shortmodel = (DefaultTableModel) CTB.jTable9.getModel();

//létrehozunk egy String tömböt
            String[][] pnadatok = new String[shortmodel.getRowCount()][8];
//bejárjuk a modellt és bepakolunk mindent is a tömbbe
            for (int m = 0; m < shortmodel.getRowCount(); m++) {
                pnadatok[m][0] = CTB.jTable1.getValueAt(i, 0).toString();
                for (int p = 0; p < 7; p++) {
                    try {
                        pnadatok[m][p + 1] = shortmodel.getValueAt(m, p).toString();
                    } catch (Exception e) {
                        pnadatok[m][p + 1] = "";
                    }
                }

            }

            adatok.add(pnadatok);

        }

        this.dispose();
        Cursor normalcursor = new Cursor(Cursor.DEFAULT_CURSOR);
        setCursor(normalcursor);

//megvannak az adatok , be kell járni és ki kell szedni ami nem kell , és le kell írni ami kell
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.setDialogTitle("Mentés helye:");
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {

            File fileToSave = fileChooser.getSelectedFile();
            try {
                ExportToFile(adatok, new File(fileToSave.getAbsolutePath() + ".xls"));
            } catch (IOException ex) {
                Logger.getLogger(CTB_ExportShorty.class.getName()).log(Level.SEVERE, null, ex);
            } catch (WriteException ex) {
                Logger.getLogger(CTB_ExportShorty.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_jButton2ActionPerformed

    public void ExportToFile(ArrayList<String[][]> lista, File file) throws IOException, WriteException {

//kiszedjük a kijelölt jlist elemeket egy tömbbe opseq
        String[] opseq = new String[jList2.getSelectedIndices().length];
        int[] selectedIx = jList2.getSelectedIndices();

        for (int i = 0; i < selectedIx.length; i++) {
            opseq[i] = jList2.getModel().getElementAt(selectedIx[i]).toString();
        }

        //kiszedjük a kijelölt jlist elemeket egy tömbbe supply
        String[] supply = new String[jList1.getSelectedIndices().length];
        selectedIx = jList1.getSelectedIndices();

        for (int i = 0; i < selectedIx.length; i++) {
            supply[i] = jList1.getModel().getElementAt(selectedIx[i]).toString();
        }

        WritableWorkbook workbook1 = Workbook.createWorkbook(file);
        WritableSheet sheet1 = workbook1.createSheet("First Sheet", 0);

        Label column = new Label(0, 0, "Parent");
        sheet1.addCell(column);
        column = new Label(1, 0, "Partnumber");
        sheet1.addCell(column);
        column = new Label(2, 0, "Calculated QTY");
        sheet1.addCell(column);
        column = new Label(3, 0, "Description");
        sheet1.addCell(column);
        column = new Label(4, 0, "Raw OH");
        sheet1.addCell(column);
        column = new Label(5, 0, "Master comment");
        sheet1.addCell(column);
        column = new Label(6, 0, "OpSeq");
        sheet1.addCell(column);
        column = new Label(7, 0, "Supply");
        sheet1.addCell(column);

//feltöltjük sorokkal 
//hányadik sorban vagyunk
        int sorszama = 1;
        for (int i = 0; i < lista.size(); i++) {

            for (int s = 0; s < lista.get(i).length; s++) {
//meg kell viszgálni , hogy kell e ez az opseq
                boolean tovabbmenni = false;
                for (int o = 0; o < opseq.length; o++) {

                    if (lista.get(i)[s][6].replace(",", "").equals(opseq[o])) {

                        tovabbmenni = true;
                        break;
                    }

                }
//ha van ilyen opseq kiválasztva akkor továbbmegyünk
                if (tovabbmenni) {

//megvizsgáljuk a supplyt is
//visszaállítjuk a továbbmennit hamisra először
                    tovabbmenni = false;
                    for (int o = 0; o < supply.length; o++) {

                        if (lista.get(i)[s][7].equals(supply[o])) {

                            tovabbmenni = true;
                            break;
                        }

                    }

                }

//már csak a darabszám a kérdés
                if (tovabbmenni) {
//átállítjuk falsra
                    tovabbmenni = false;
//ha nincs megadva darab , sikítunk

                    if (jTextField1.getText().equals("")) {

                        infobox info = new infobox();
                        info.infoBox("Nem adtál meg darabszámot!", "Figyelem!");
                        return;
                        
                    }
                    if (Integer.parseInt(lista.get(i)[s][2]) <= Integer.parseInt(jTextField1.getText())) {
                        tovabbmenni = true;
                    }

                }
//ha idáig megúsztuk akkor kiirjuk a sort
                if (tovabbmenni) {
//hozzáadjuk a parentet
                    Label row = new Label(0, sorszama, lista.get(i)[s][0]);
                    sheet1.addCell(row);

                    for (int oszlopok = 0; oszlopok < 7; oszlopok++) {

                        row = new Label(oszlopok + 1, sorszama, lista.get(i)[s][oszlopok + 1]);
                        sheet1.addCell(row);

                    }
//hozzáadunk egyet a sorokhoz mert írtunk
                    sorszama++;

                }

            }

        }

        workbook1.write();
        workbook1.close();
        infobox.infoBox("Az exportálás megtörtént!", "Export");

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CTB_ExportShorty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CTB_ExportShorty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CTB_ExportShorty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CTB_ExportShorty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CTB_ExportShorty().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
